/*
 * grunt-cloudfront
 * @author Florent Lamoureux (@flrent) - original author
 * Company PayrollHero.com
 * @author Laszlo Bacsi (@icanscale)
 * Company Secret Sauce Partners, Inc.
 * http://github.com/sspinc/grunt-cloudfront
 *
 * Copyright (c) 2013 PayrollHero.com
 * Copyright (c) 2013 Secret Sauce Partners, Inc.
 * Licensed under the MIT license.
 */

var util = require('util'),
    AWS = require('aws-sdk');

function inspect(data) {
  return util.inspect(data, {depth: null});
}

module.exports = function(grunt) {
  'use strict';

  grunt.registerMultiTask('cloudfront', 'Cloudfront cache invalidating task', function() {
    var done = this.async(),
        options = this.options(),
        paths = this.data.paths;

    AWS.config.update({ region: options.region });

    if (options.credentials) {
      AWS.config.update({
        accessKeyId:     options.credentials.accessKeyId,
        secretAccessKey: options.credentials.secretAccessKey
      });
    } else {
      AWS.config.update({
        accessKeyId:     process.env['AWS_ACCESS_KEY_ID'],
        secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY']
      });
    }

    var CloudFront = new AWS.CloudFront();

    CloudFront.createInvalidation({
      DistributionId:    options.distributionId,
      InvalidationBatch: {
        'Paths': {
          'Quantity': paths.length,
          'Items': paths
        },
        'CallerReference': (new Date()).getTime().toString()
      }
    }, function (err, data) {
      if (err) {
        grunt.log.error("Invalidation failed : "+err.message);
        return done(false);
      }

      grunt.log.write("Invalidation succeeded. Please wait a few minutes for propagation.").ok();
      console.log(inspect(data));

      if (options.listInvalidations) {
        CloudFront.listInvalidations({
          DistributionId: options.distributionId
        }, function (err, data) {
          if (err) {
            grunt.log.errorlns(inspect(err));
          } else {
            grunt.log.writeln(inspect(data));
          }
          done();
        });
      } else {
        done();
      }
    });
  });
};
